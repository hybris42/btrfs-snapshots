#! /bin/bash

source /etc/default/snapshots

# Check for required /etc/snapshots.list
if [ ! -e /etc/snapshots.list ]; then
    echo "ERROR: /etc/snapshots.list is required"
    exit 1
fi

# Check for required variables that should be defined in /etc/default/snapshots
if [ -z ${SNAPSHOTS_USER} ] || [ -z ${SNAPSHOTS_SERVER} ] || [ -z ${SNAPSHOTS_PATH} ]; then
    echo "ERROR: SNAPSHOTS_USER, SNAPSHOTS_SERVER or SNAPSHOTS_PATH is not defined, check your /etc/default/snapshots"
    exit 1
fi

# Alias to run commands on SNAPSHOTS_USER@SNAPSHOTS_SERVER defined from /etc/default/snapshots
snapshots-remote-exec() {
    ssh ${SNAPSHOTS_USER}@${SNAPSHOTS_SERVER} $@
}

# Various logs
snapshots-logger() {
    # Send information to metrics
    [ -n "${METRICS_URL}" ] && [ -n "${METRICS_AUTH}" ] && [ -n "$1" ] && \
        curl -s -u "${METRICS_AUTH}" -X POST "${METRICS_URL}/write?db=events" \
             --data-binary "backup,host=$(hostname),title=backup text=\"$1\""
    # Write log on remote:/var/log/snapshots-send.log
    snapshots-remote-exec "echo \"[\$(date -u)] $1\" >> /var/log/snapshots/snapshots-send.log"
}

# Check if snapshots server is up
if ! snapshots-remote-exec true 2> /dev/null; then
    echo "ERROR: ${SNAPSHOTS_SERVER} unreachable"
    exit 1
fi

# Read btrfs volumes to snapshot from /etc/snapshots.list
IFS=$'\n'
for volume_desc in $(cat /etc/snapshots.list); do
    # Override retention policy in /etc/snapshots.list, or example: "/ SNAPSHOTS_KEEP_MONTHLY_REMOTE=12"
    source /etc/default/snapshots
    volume=""
    IFS=' '
    for v in ${volume_desc}; do
        if [ -z ${volume} ]; then
            volume=${v}
        else
            declare ${v}
        fi
    done

    # Check on host and volume
    if [ -z "${volume}" ]; then
        echo "WARNING: skipping empty line in /etc/snapshots.list"
        continue
    fi

    # Add extra '/' if necessary
    if [ x"${volume: -1}" != x'/' ]; then
        volume="${volume}/"
    fi

    # Check if path is a btrfs subvolume
    if ! btrfs subvolume show ${volume} > /dev/null 2>&1; then
        echo "ERROR: skipping element in /etc/snapshots.list, '${volume}' is not a mountpoint"
        continue
    fi

    # Make sure remote directory exists
    snapshots-remote-exec mkdir -p ${SNAPSHOTS_PATH}${volume}

    # Try to send every available snapshots
    previous_snapshot=""
    for snapshot in ${volume}.daily-*; do
        # Snapshot already sent
        if snapshots-remote-exec test -e ${SNAPSHOTS_PATH}${snapshot}; then
            [ -n "${DEBUG}" ] && echo "Snapshot ${snapshot} already sent"
            previous_snapshot=${snapshot}
            continue
        fi

        # First snapshot, sent plain snapshot
        if [ x${previous_snapshot} = x ]; then
            echo "Sending first snapshot of ${volume}"
            snapshots-logger "$(hostname):${volume} backup launched"
            btrfs send -q ${snapshot} | snapshots-remote-exec sudo btrfs receive ${SNAPSHOTS_PATH}${volume}
            snapshots-logger "$(hostname):${volume} backup done"
            previous_snapshot=${snapshot}
            continue
        fi

        # Send incremental snapshot, cloned from previous snapshot
        echo "Sending snapshot of ${volume}"
        snapshots-logger "$(hostname):${volume} backup launched"
        btrfs send -q -p ${previous_snapshot} ${snapshot} | snapshots-remote-exec sudo btrfs receive ${SNAPSHOTS_PATH}${volume}
        snapshots-logger "$(hostname):${volume} backup done"
        previous_snapshot=${snapshot}
    done

    # Cleaning daily snapshots to keep no more than 30
    # (or SNAPSHOTS_KEEP_DAILY_REMOTE if set in /etc/default/snapshots)
    echo "Keeping last ${SNAPSHOTS_KEEP_DAILY_REMOTE:-30} daily snapshots of ${volume} remotely"
    while [ $(snapshots-remote-exec ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | wc -l) -gt ${SNAPSHOTS_KEEP_DAILY_REMOTE:-30} ]; do
        snapshots-remote-exec sudo btrfs subvolume delete $(snapshots-remote-exec ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | head -n1)
    done

    # Monthly snapshot from last one
    [ ${SNAPSHOTS_KEEP_MONTHLY_REMOTE} -eq 0 ] && continue
    last_snapshot_path=$(snapshots-remote-exec ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | tail -n1)
    last_snapshot_month=${last_snapshot_path:(-10):7}
    if $(snapshots-remote-exec test ! -e ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month}); then
        snapshots-remote-exec sudo btrfs subvolume snapshot -r ${last_snapshot_path} ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month}
        snapshots-remote-exec sync
    else
        [ -n "${DEBUG}" ] && echo "Monthly snapshot ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month} already exists"
    fi

    # Cleaning monthly snapshots to keep no more than 6
    # (or SNAPSHOTS_KEEP_MONTHLY_REMOTE if set in /etc/default/snapshots)
    echo "Keeping last ${SNAPSHOTS_KEEP_MONTHLY_REMOTE:-6} monthly snapshots of ${volume} remotely"
    while [ $(snapshots-remote-exec ls -d ${SNAPSHOTS_PATH}${volume}.monthly-\* | wc -l) -gt ${SNAPSHOTS_KEEP_MONTHLY_REMOTE:-6} ]; do
        snapshots-remote-exec sudo btrfs subvolume delete $(snapshots-remote-exec ls -d ${SNAPSHOTS_PATH}${volume}.monthly-\* | head -n1)
    done
done
