#! /bin/bash

source /etc/default/snapshots

# Check for required /etc/snapshots.list
if [ ! -e /etc/snapshots.list ]; then
    echo "ERROR: /etc/snapshots.list is required"
    exit 1
fi

# Check for required variables that should be defined in /etc/default/snapshots
if [ -z ${SNAPSHOTS_USER} ] || [ -z ${SNAPSHOTS_SERVER} ] || [ -z ${SNAPSHOTS_PATH} ]; then
    echo "ERROR: SNAPSHOTS_USER, SNAPSHOTS_SERVER or SNAPSHOTS_PATH is not defined, check your /etc/default/snapshots"
    exit 1
fi

# Alias to run commands on SNAPSHOTS_USER@SNAPSHOTS_SERVER defined from /etc/default/snapshots
do_ssh() {
    ssh ${SNAPSHOTS_USER}@${SNAPSHOTS_SERVER} $@
}

# Send information to metrics
send_metrics() {
    [ -n "${METRICS_URL}" ] && [ -n "${METRICS_AUTH}" ] && [ -n "$1" ] && \
        curl -s -u "${METRICS_AUTH}" -X POST "${METRICS_URL}/write?db=events" \
             --data-binary "backup,host=$(hostname),title=backup text=\"$1\""
}

# Check if snapshots server is up
if ! do_ssh true 2> /dev/null; then
    echo "ERROR: ${SNAPSHOTS_SERVER} unreachable"
    exit 1
fi

# Read btrfs volumes to snapshot from /etc/snapshots.list
for host_volume in $(cat /etc/snapshots.list); do
    host=$(echo ${host_volume} | cut -d':' -f1)
    volume=$(echo ${host_volume} | cut -d':' -f2)

    # Check on host and volume
    if [ -z "${host}" ] || [ -z "${volume}" ]; then
        echo "ERROR: skipping element in /etc/snapshots.list, '${host_volume}' is invalid"
        continue
    fi

    # Only consider own volumes
    if [ ${host} != $(hostname) ]; then
        continue
    fi

    # Add extra '/' if necessary
    if [ x"${volume: -1}" != x'/' ]; then
        volume="${volume}/"
    fi

    # Check if path is a btrfs subvolume
    if ! btrfs subvolume show ${volume} > /dev/null 2>&1; then
        echo "ERROR: skipping element in /etc/snapshots.list, '${volume}' is not a mountpoint"
        continue
    fi

    # Make sure remote directory exists
    do_ssh mkdir -p ${SNAPSHOTS_PATH}${volume}

    # Try to send every available snapshots
    previous_snapshot=""
    for snapshot in ${volume}.daily-*; do
        # Snapshot already sent
        if do_ssh test -e ${SNAPSHOTS_PATH}${snapshot}; then
            [ -n "${DEBUG}" ] && echo "Snapshot ${snapshot} already sent"
            previous_snapshot=${snapshot}
            continue
        fi

        # First snapshot, sent plain snapshot
        if [ x${previous_snapshot} = x ]; then
            echo "Sending first snapshot of ${volume}"
            send_metrics "$(hostname):${volume} backup launched"
            btrfs send -q ${snapshot} | do_ssh sudo btrfs receive ${SNAPSHOTS_PATH}${volume}
            send_metrics "$(hostname):${volume} backup done"
            previous_snapshot=${snapshot}
            continue
        fi

        # Send incremental snapshot, cloned from previous snapshot
        echo "Sending snapshot of ${volume}"
        [ -n "${METRICS_URL}" ] && [ -n "${METRICS_AUTH}" ] && send_metrics "$(hostname):${volume} backup launched"
        btrfs send -q -p ${previous_snapshot} ${snapshot} | do_ssh sudo btrfs receive ${SNAPSHOTS_PATH}${volume}
        [ -n "${METRICS_URL}" ] && [ -n "${METRICS_AUTH}" ] && send_metrics "$(hostname):${volume} backup done"
        previous_snapshot=${snapshot}
    done

    # Cleaning daily snapshots to keep no more than 30
    while [ $(do_ssh ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | wc -l) -gt 30 ]; do
        do_ssh sudo btrfs subvolume delete $(do_ssh ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | head -n1)
    done

    # Monthly snapshot from last one
    last_snapshot_path=$(do_ssh ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | tail -n1)
    last_snapshot_month=${last_snapshot_path:(-10):7}
    if $(do_ssh test ! -e ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month}); then
        do_ssh sudo btrfs subvolume snapshot -r ${last_snapshot_path} ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month}
        do_ssh sync
    else
        [ -n "${DEBUG}" ] && echo "Monthly snapshot ${SNAPSHOTS_PATH}${volume}.monthly-${last_snapshot_month} already exists"
    fi

    # Cleaning monthly snapshots to keep no more than 6
    while [ $(do_ssh ls -d ${SNAPSHOTS_PATH}${volume}.monthly-\* | wc -l) -gt 6 ]; do
        do_ssh sudo btrfs subvolume delete $(do_ssh ls -d ${SNAPSHOTS_PATH}${volume}.daily-\* | head -n1)
    done
done
