#! /bin/bash

# Check for required /etc/snapshots.list
if [ ! -e /etc/snapshots.list ]; then
    echo "ERROR: /etc/snapshots.list is required"
    exit 1
fi

# Read btrfs volumes to snapshot from /etc/snapshots.list
IFS=$'\n'
for volume_desc in $(cat /etc/snapshots.list); do
    # Override retention policy in /etc/snapshots.list, or example: "/ SNAPSHOTS_KEEP_MONTHLY_REMOTE=12"
    source /etc/default/snapshots
    volume=""
    IFS=' '
    for v in ${volume_desc}; do
        if [ -z ${volume} ]; then
            volume=${v}
        else
            declare ${v}
        fi
    done

    # Check on host and volume
    if [ -z "${volume}" ]; then
        echo "WARNING: skipping empty line in /etc/snapshots.list"
        continue
    fi

    # Add extra '/' if necessary
    if [ x"${volume: -1}" != x'/' ]; then
        volume="${volume}/"
    fi

    # Check if path is a btrfs subvolume
    if ! btrfs subvolume show ${volume} > /dev/null 2>&1; then
        echo "ERROR: skipping element in /etc/snapshots.list, '${volume}' is not a btrfs subvolume"
        continue
    fi

    # Check if snapshot is already done
    if ! btrfs subvolume show ${volume}.daily-$(date +%Y-%m-%d) > /dev/null 2>&1; then
        btrfs subvolume snapshot -r ${volume} ${volume}.daily-$(date +%Y-%m-%d)
        sync
    else
        echo "Snapshot ${volume}.daily-$(date +%Y-%m-%d) already exists"
    fi

    # Cleaning snapshots to keep no more than 7
    # (or SNAPSHOTS_KEEP_LOCAL if set in /etc/default/snapshots)
    echo "Keeping last ${SNAPSHOTS_KEEP_LOCAL:-7} daily snapshots of ${volume} locally"
    while [ $(ls -d ${volume}.daily-* | wc -l) -gt ${SNAPSHOTS_KEEP_LOCAL:-7} ]; do
        btrfs subvolume delete $(ls -d ${volume}.daily-* | head -n1)
    done
done
